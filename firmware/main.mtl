// VLISP - Feb 06 - by Sylvain Huet
// Metal

proto main 0;;

// #define SIMU

// chose one
// #define PING
// #define XMPP
#define SERVERLESS

#define WEBSERVER
#define DAYTIMESERVER

// #define WIFI_DEBUG
// #define DHCP_DEBUG
// #define DNS_DEBUG
// #define HTTP_DEBUG
// #define EARS_DEBUG
// #define XMPP_DEBUG
// #define TRAME_DEBUG
// #define AUDIOLIB_DEBUG
// #define INTERACTIVE_DEBUG

// recording
var recording = 0;;

#define AUDIOLIB
#define EARSLIB
#define INFOLIB
#define RECLIB

#ifdef SIMU
const PORT_DAYTIME = 8013;;
const PORT_HTTP = 8080;;
#else
const PORT_DAYTIME = 13;;
const PORT_HTTP = 80;;
#endif

const HARDWARE=4;;

//
// Etats generaux
var gItState = 0;;          // interactif
var gSleepState = 1;;       // sleeping
var gStreamingState = 0;;   // streaming
var gProcessingState = 0;;  // processing a program
var gProcessingWaitState = 0;;  // executing a "wait" command in a program. when checking this var, check gProcessingState first, as it is not always reseted to 0
var gBusyState = 0;;        // busy (incoming message queue full)
var gItApp = nil;;          // the name of the interactive application
var gEarInited = 0;;        // si les oreilles ont été initialisées.

const BYTECODE_REVISION_STR = "$Rev: __DATE__ $";;

#include protos/net_protos.mtl
#include protos/run_protos.mtl
#include protos/dns_protos.mtl
#include protos/sock_protos.mtl
#include protos/ears_protos.mtl
#include protos/midi_protos.mtl
#include protos/interactive_protos.mtl
#include protos/trame_protos.mtl
#include protos/url_protos.mtl

#include hw/leds.mtl
#include utils/utils.mtl
#include utils/jobs.mtl
#include utils/md5.mtl
#include utils/b64.mtl
#include utils/xmlparser.mtl
#include utils/config.mtl
#include utils/const_data.mtl
#include utils/url.mtl

#include net/net.mtl
#include net/dhcp.mtl
#include net/dns.mtl
#include net/http.mtl
#include net/sock.mtl
#include srv/time.mtl

proto XmppSessionRequestResource 1;;

#ifdef XMPP
#include srv/xmpp.mtl
#else
fun XmppSessionRequestResource newRes = 0 ;;
fun XmppSessionSendButtonMsg btn withEvent eventValue = 0 ;;
var currentTrameID=0;;
#endif

#ifdef RECLIB
#include utils/reclib.mtl
#endif

#ifdef AUDIOLIB
#include utils/audiolib.mtl
#endif

#ifdef EARSLIB
#include hw/ears.mtl
#endif

#ifdef INFOLIB
#include srv/info.mtl
#endif

#include srv/surprise.mtl
#include srv/crontab.mtl
#include utils/hooks.mtl
#include net/wifi.mtl
#include utils/env.mtl

const MASK_BUTTON = 1;;
const MASK_EAR_LEFT = 2;;
const MASK_EAR_RIGHT = 4;;
const MASK_RFID = 8;;
const STD_NET_TIMEOUT=10000;;
const LED_TIMEOUT=600;; // 10 minutes

var rsctoget;; // list of remaining resources to get for the execution of the current trame
var g_streaming_chor_enabled=1;;  // settings, command="IC", managed in eval_IC_msg
var g_cookie="";;
var g_int_mask=0;;
var g_record_enabled = 1;;
var gCurAudioCmdIndex=-1;;

#include utils/palette.mtl
#include utils/midi.mtl
#include hw/button.mtl

#include srv/meteo.mtl

#ifdef PING
#include srv/ping.mtl
#endif

#ifdef WEBSERVER
#include srv/http_server.mtl
#endif
#ifdef DAYTIMESERVER
#include srv/daytime_server.mtl
#endif

#ifdef RECLIB
#include utils/record.mtl
#endif

#include utils/choreographic.mtl
#include utils/interactive.mtl
#include utils/streaming.mtl
#include utils/sleep.mtl
#include utils/trame.mtl
#include hw/rfid.mtl
#include srv/run.mtl

/**
 * Initialize the jobs
 */
fun jobs_init=
    job_start "wifi_run" #wifi_run;
    job_start "button_loop" #button_loop;
    job_start "run_step" #run_step;
#ifdef XMPP
    job_start "XmppSessionRun" #XmppSessionRun;
    job_start "XmppSessionIdle" #XmppSessionIdle;
#endif
#ifdef RECLIB
    job_start "record_upload_timeout" #record_upload_timeout;
#endif
#ifdef SERVERLESS
    job_start "run_icmp_ping" #run_icmp_ping;
    job_start "periodic_send_gratuitous_arp" #periodic_send_gratuitous_arp;
#endif
#ifndef SIMU
    job_start "dhcp_check" #dhcp_check;
#endif
    job_start "ear_process_touched" #interactiveEarProcessTouched;
    job_start "update_time_internal" #update_time_internal;
    job_start "audiolib_wav_time" #audiolib_wav_time;
    job_start "updatevol" #updatevol;
    0;;

fun main=
    leds_set_state LEDS_STATE_START ;
    MACecho netMac 0 1;
    set master=0;
    Secholn ":started";
    config_init;
    wifi_init 0;
    loopcb #job_loop;
    info_init;
    netstart;
    dns_start_client;
#ifndef SIMU
    dhcp_start_client;
#endif
    Secholn ":done";
    srand time_ms;
    updatevol;
#ifdef WEBSERVER
    http_server_start_srv PORT_HTTP;
#endif
#ifdef DAYTIMESERVER
    daytime_start_srv PORT_DAYTIME;
#endif
    run_init;
    jobs_init;
#ifdef SIMU
// Secholn json_jobs;
// reboot 0x0407FE58 0x13fb6754;
#endif
    interactive_init;
    0;;
