#include protos/meteo_protos.mtl
#include protos/sleep_protos.mtl
#include protos/audiolib_protos.mtl

//--------------------------------------------------------------------------------------------------
// HTTP Server
//--------------------------------------------------------------------------------------------------

const HTTP_200 = "200 OK";;
const HTTP_204 = "204 No Content";;
const HTTP_404 = "404 Not Found";;
const http_header_sep="\13\n\13\n";; // HTTP header separator
const http_content_start="ontent-Length: ";;
const http_content_start2="ontent-length: ";;
const http_content_end="\13\n";;

/**
 * Generate the HTTP response header.
 */
fun http_header http_status content_type=
    strcatlist
        "HTTP/1.0 "::http_status::
        "\13\10Server: MTL HTTP server"::
        (if content_type!=nil then (strcat "\13\10Content-Type: " content_type) else "")::
        "\13\10\13\10"::nil
;;

/**
 * Extract the header of an HTTP message string.
 * It works by finding the double CRLF that separates the header from the body.
 * res: HTTP request
 */
fun http_get_header res =
    let strstr res http_header_sep 0 -> i in
    if i!=nil then strsub res 0 i;;

/**
 * Parse an HTTP header to calculate the total size of the full HTTP message.
 * It reads the 'Content-Length' value and adds it to the length of the header itself.
 * s: HTTP request
 */
fun http_find_content_end s=
    let http_get_header s -> header in
    if header!=nil then
    let strstr header http_content_start 0 -> i in
    let if i!=nil then i else strstr header http_content_start2 0 -> i in
    let if i!=nil then strstr header http_content_end i -> j in
    (strlen header)+(strlen http_header_sep)+if i!=nil then
        let i+strlen http_content_start -> i in atoi strsub header i if j!=nil then j-i;;

/**
 * Main data handling function for an HTTP connection.
 * It buffers incoming data until a complete HTTP request is received,
 * then calls the user callback.
 * cnx: TCP connection
 * input: new chunk of data received
 * sock: socket object for this connection
 */
fun http_sock_read cnx input sock=
    // If the input is nil or empty, the client has closed the connection
    if input==nil ||0==strlen input then
    (
        closetcp cnx;
        nil
    )
    else
    (
        if sock.sockSize==nil then
        (
            set sock.sockInput=(strcat hd sock.sockInput input)::nil;
            Secho "size=";
            Iecholn set sock.sockSize=http_find_content_end hd sock.sockInput;
            nil
        )
        else set sock.sockInput=input::sock.sockInput;
        // Check if the total received data length now equals or exceeds the expected size
        if sock.sockSize!=nil && (slistlen sock.sockInput)>=sock.sockSize then
        let strcatlist rev sock.sockInput nil -> str in
        (
            // Clear the input buffer
            set sock.sockInput=nil;
            // Call the callback function with the full request
            let call sock.sockCallback [str] -> res in
            (
                sock_send cnx sock res;
                sock_close_after cnx sock
            )
        )
    );
    0;;

/**
 * Event handler for a connection being used for HTTP.
 * This function is registered as the callback for the TCP connection.
 * cnx: TCP connection
 * val: event type (e.g., TCPWRITE, TCPCLOSE)
 * msg: dataa associated with the event (e.g., incoming data)
 * sock: socket object for this connection
 */
fun http_sock_event cnx val msg sock=
    if val==TCPWRITE then sock_write cnx sock
    else if val==TCPCLOSE then http_sock_read cnx nil sock
    else http_sock_read cnx msg sock;;

/**
 * Callback function for the main HTTP listening socket.
 * This is called by the TCP stack whenever a new client connects.
 * cnx: TCP connection
 * cbrequest: function that will handle the logic for a request
 */
fun http_server_cb cnx code msg cbrequest=
    Secholn "httpsrv accept";
    let [sockCallback:cbrequest]-> sock in
    (
        tcpcb cnx fixarg4 #http_sock_event sock;
        0
    );;

//--------------------------------------------------------------------------------------------------

fun doublequote s=
    strcatlist "\""::s::"\""::nil
;;

fun jsonvalue k v=
    strcatlist (doublequote k)::": "::(doublequote v)::nil
;;

fun jsonnext s=
    strcat s ",\n"
;;

fun jsonlast s=
    strcat s "\n"
;;

fun jsonstatus=
    strcatlist
        (http_header HTTP_200 "application/json")::
        "{\n"::
            (jsonnext jsonvalue "mac" webmac netMac)::
            (jsonnext jsonvalue "ts" current_time_human)::
            (jsonnext jsonvalue "time" itoa time)::
            (jsonnext jsonvalue "city_code" config_get_city_code)::
            (jsonnext jsonvalue "dst" itoa config_get_dst)::
            (jsonnext jsonvalue "time_offset" itoa get_time_offset)::
            (jsonnext jsonvalue "language" config_get_lang)::
            (jsonnext jsonvalue "latitude" config_get_latitude)::
            (jsonnext jsonvalue "longitude" config_get_longitude)::
            (jsonnext jsonvalue "wake_up" itoa config_get_wake_up)::
            (jsonnext jsonvalue "go_to_bed" itoa config_get_go_to_bed)::
            (jsonnext jsonvalue "taichi" itoa infotaichi)::
            (jsonnext jsonvalue "messages" itoa infomessages)::
            (jsonnext jsonvalue "left" itoa extleft)::
            (jsonnext jsonvalue "right" itoa extright)::
            (jsonnext jsonvalue "earsmode" itoa earsmode)::
            (jsonnext jsonvalue "ear_detecting" itoa earDetecting)::
            (jsonnext jsonvalue "sleep_state" itoa gSleepState)::
            (jsonnext jsonvalue "streaming_state" itoa gStreamingState)::
            (jsonnext jsonvalue "processing_state" itoa gProcessingState)::
            (jsonnext jsonvalue "busy_state" itoa gBusyState)::
            (jsonnext jsonvalue "it_state" itoa gItState)::
            (jsonnext jsonvalue "it_app" gItApp)::
            (jsonnext jsonvalue "meteo_weather_code" itoa _meteo_weather_code)::
            (jsonlast jsonvalue "rev" BYTECODE_REVISION_STR)::
        "}"::nil
;;

fun job_format_json job =
    strcatlist
        "{\n"::
            (jsonnext jsonvalue "name" job.name)::
            (jsonlast jsonvalue "status" job_status job)::
        "}"::nil
;;

fun json_jobs =
    let strcat http_header HTTP_200 "application/json" "[\n" -> result in
    let listlen _jobs -> n in
    for l=_jobs;l!=nil; tl l do
        let hd l -> job in
        let if nil!=tl l then #jsonnext else #jsonlast -> jf in
        let if nil!=tl l then ",\n" else "\n]" -> sep in
        set result = strcatlist result::(job_format_json job)::sep::nil
;;

//--------------------------------------------------------------------------------------------------

fun httpindex=
    strcat
        http_header HTTP_200 "text/html"
        "
#include srv/www/index.html
        "
;;

fun milligram_css=
    strcat
        http_header HTTP_200 "text/css"
        "
#include srv/www/milligram.css
        "
;;


//--------------------------------------------------------------------------------------------------

proto taichistart 0;;
proto stopEverythingAndResetToIdle 0;;
proto get_time_from_timeserver 0;;
proto audiolib_start_http 2;;
proto surprise 0;;
proto _cbWavError 0;;
proto _infosrc_update 2;;

//--------------------------------------------------------------------------------------------------

fun filterplus s=
    let strlen s -> n in
    for i=0;i<n do if (strget s i)=='+' then strset s i 32;
    s;;

fun filterpercent s i0=
    let strstr s "%" i0 -> i in
    if i==nil then (strsub s i0 nil)::nil
    else (strsub s i0 i-i0)::(ctoa htoi strsub s i+1 2)::(filterpercent s i+3);;

fun extractargs uri i=
    let strstr uri "=" i-> j in
    if j!=nil then let strstr uri "&" j-> k in
    let if k==nil then strlen uri else k -> k in
    [(strget uri i) strcatlist filterpercent filterplus strsub uri j+1 k-j-1 0]::extractargs uri k+1;;

fun extractpage uri=
    strsub uri 1 nil;;

fun uriextract uri =
    let strstr uri "?" 0 -> i in
    if i==nil then [extractpage uri nil]
    else [extractpage strsub uri 0 i extractargs uri i+1];;

// Get a string value from the args by the key
fun Sgetargvalue args key =
    let nil -> value in (
        for l=args; l!=nil; tl l do
            let hd l->[n v] in
                if n==key then set value=v;
        value
    )
    ;;

// Get an integer value from the args by the key
fun Igetargvalue args key =
    let nil -> value in (
        for l=args; l!=nil; tl l do
            let hd l->[n v] in
                if n==key then set value=atoi v;
        value
    )
    ;;

/**
 * Process an HTTP request and generate the response
 */
fun http_process_request req=
    let strstr req " " 0 -> i in
    let strstr req " " i+1 -> j in
    let strsub req i+1 j-i-1 -> uri in
    let uriextract uri -> [page args] in
    (
        Secho "uri : "; Secholn uri;
        Secho "page : "; Secholn page;

        // misc
        if !strcmp page "update-time" then (  // get time from server
            get_time_from_timeserver;
            http_header HTTP_204 nil
        )
        else if !strcmp page "update-weather" then (  // get weather info
            meteo_get;
            http_header HTTP_204 nil
        )
        else if !strcmp page "stop" then (  // stop everything we can be doing and resets to either idle or asleep
            stopEverythingAndResetToIdle;
            http_header HTTP_204 nil
        )
        else if !strcmp page "reboot" then (  // reboot
            reboot 0x0407FE58 0x13fb6754;
            nil
        )
        else if !strcmp page "surprise" then (
            if !gSleepState then surprise;
            http_header HTTP_204 nil
        )
        else if !strcmp page "status" then (  // json status
            jsonstatus
        )
        else if !strcmp page "jobs" then (
            json_jobs
        )
        else if !strcmp page "communication" then (  // play sound
            if !gSleepState then (midi_play midi_communion);
            http_header HTTP_204 nil
        )
        else if !strcmp page "ack" then (
            if !gSleepState then (midi_play midi_ack);
            http_header HTTP_204 nil
        )
        else if !strcmp page "abort" then (
            if !gSleepState then (midi_play midi_abort);
            http_header HTTP_204 nil
        )
        else if !strcmp page "ministop" then (
            midi_play midi_ministop;
            http_header HTTP_204 nil
        )
        else if !strcmp page "play" then (
            if !gSleepState then (audiolib_start_http Sgetargvalue args 'u' #_cbWavError);
            http_header HTTP_204 nil
        )
        else if !strcmp page "say" then (
            if !gSleepState then (audiolib_start_http (strcatlist "http://translate.google.com/translate_tts?ie=UTF-8&total=1&idx=0&textlen=32&client=tw-ob&tl=En-gb&q="::(strreplace (Sgetargvalue args 't') " " "+")::nil) #_cbWavError);
            http_header HTTP_204 nil
        )
        else if !strcmp page "taichi" then let Igetargvalue args 'v' -> v in (  // taichi
            if v == 1000 && !gSleepState then
                taichistart
            else
                set infotaichi = v;
            http_header HTTP_204 nil
        )
        else if !strcmp page "mp3" then (
            audiolib_start_http Sgetargvalue args 'v' #_cbWavError;
            http_header HTTP_204 nil
        )
        else if !strcmp page "sleep" then (  // sleep
            sleep_start;
            http_header HTTP_204 nil
        )
        else if !strcmp page "wakeup" then (  // wake up
            sleep_end;
            http_header HTTP_204 nil
        )
        else if !strcmp page "left" then (  // p=position d=direction
            if !gSleepState then (earGo 0 Igetargvalue args 'p' Igetargvalue args 'd');
            http_header HTTP_204 nil
        )
        else if !strcmp page "right" then (  // p=position d=direction
            if !gSleepState then (earGo 1 Igetargvalue args 'p' Igetargvalue args 'd');
            http_header HTTP_204 nil
        )
        else if !strcmp page "nose" then (  // v (0-4)
            set infomessages = Igetargvalue args 'v';
            http_header HTTP_204 nil
        )
        else if !strcmp page "weather" then (  // weather (0-5)
            if !gSleepState then (_infosrc_update 1 Igetargvalue args 'v');
            http_header HTTP_204 nil
        )
        else if !strcmp page "stock" then (  // stock market (0-6)
            if !gSleepState then (_infosrc_update 2 Igetargvalue args 'v');
            http_header HTTP_204 nil
        )
        else if !strcmp page "traffic" then (  // trafic (0-6)
            if !gSleepState then (_infosrc_update 3 Igetargvalue args 'v');
            http_header HTTP_204 nil
        )
        else if !strcmp page "mail" then (  // mail (0-4)
            if !gSleepState then (_infosrc_update 6 Igetargvalue args 'v');
            http_header HTTP_204 nil
        )
        else if !strcmp page "pollution" then (  // pollutions (0-10)
            if !gSleepState then (_infosrc_update 7 Igetargvalue args 'v');
            http_header HTTP_204 nil
        )
        else if !strcmp page "clear" then (
            for i=1;i<=8 do (_infosrc_update 0 i);
            http_header HTTP_204 nil
        )
        else if !strcmp page "setup" then (
            config_set_lang Sgetargvalue args 'l';            // set language
            config_set_city Sgetargvalue args 'c';            // set city code
            config_set_dst atoi Sgetargvalue args 'd';        // set Daylight Saving Time
            config_set_latitude Sgetargvalue args 'j';        // set latitude
            config_set_longitude Sgetargvalue args 'k';       // set longitude
            config_set_wake_up atoi Sgetargvalue args 'w';    // set wake up time
            config_set_go_to_bed atoi Sgetargvalue args 'b';  // set go to bed time
            config_save;
            meteo_get;
            http_header HTTP_204 nil
        )
        else if !strcmp page "milligram.css" then (
            milligram_css
        )
        else if !strcmp page "" then (  // index page
            httpindex
        )
        else (
            strcat (http_header HTTP_404 "text/plain") "Not Found"
        )
    );;


fun startwebserver port =
    listentcp port fixarg4 #http_server_cb #http_process_request;
    Secholn "startwebserver";
    0;;
