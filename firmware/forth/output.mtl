/**
 * Output words for Forth interpreter
 * Copyright (c) 2025 Andrea Bonomi
 * This code is licensed under the MIT License
 */

proto forth_wstack_to_str 1 ;;

fun forth_write f s=
    set f.output = s :: f.output;
    nil;;

fun forth_word_fmt word=
    if word.int != nil then itoa word.int
    else if word.str != nil then word.str
    else if word.wstack != nil then forth_wstack_to_str word.wstack
    else "?";;

fun forth_wstack_to_str wstack=
    let nil -> t in (
        for l=wstack; l!=nil; tl l do
            set t = (forth_word_fmt (hd l)) :: (if (l != nil) then " " else "") :: t;
        strcatlist t
    );;

/**
 * . Display n ( n -- )
 */
fun forth_d f=
    let forth_pop f -> a in
    forth_write f
        if a.int != nil then (itoa a.int)
        else if a.str != nil then a.str
        else if a.wstack != nil then forth_wstack_to_str a.wstack
        else "?";;

/**
 * CR Display CR ( -- )
 */
fun forth_cr f=
    forth_write f "\n";;

/**
 * SPACE Display space ( -- )
 */
fun forth_space f=
    forth_write f " ";;

/**
 * EMIT Emit character ( char -- )
 */
fun forth_emit f=
    let forth_pop f -> a in
    let " " -> s in
    forth_write f (strset s 0 a.int);;

/**
 * BL Character value for a space ( -- char )
 */
fun forth_bl f=
    forth_push f [int:32];;
